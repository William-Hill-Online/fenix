fenix {

  cluster.shardSize = 100
  passivation.timeout = 1 minute
  updatesBeforeSnapshot = 1000

  timeout.bootstrap = 10 seconds

  tcp {
    port = 7777
    host = "0.0.0.0"
    protocol.terminal = "\u000A"
    protocol.framing.charsep = true
  }

  channel {
    input = {
      stream = "requests",
      provider = "com.williamhill.server.channel.input.KafkaInputChannel",
      snapshot.threshold = 1000
      settings = {
        bootstrap.servers = "chronos1.williamhill-dev.local:9092,chronos2.williamhill-dev.local:9092,chronos3.williamhill-dev.local:9092",
        group.id = "fenix_request",
        enable.auto.commit = false,
        key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer",
        value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer",
        auto.offset.reset = "latest"
      }
    }
    output = {
      filterBySubscription = true,
      stream = "data_stream",
      provider = "com.williamhill.fenix.server.channel.output.KafkaOutputChannel",
      settings = {
        // bootstrap.servers = "192.168.99.100:9092",
        bootstrap.servers = "chronos1.williamhill-dev.local:9092,chronos2.williamhill-dev.local:9092,chronos3.williamhill-dev.local:9092",
        acks = "all",
        retries = 0,
        batch.size = 16384,
        auto.commit.interval.ms = 1000,
        linger.ms = 0,
        key.serializer = "org.apache.kafka.common.serialization.StringSerializer",
        value.serializer = "org.apache.kafka.common.serialization.StringSerializer",
        block.on.buffer.full = true
      }
    }

  }

  es = [
    {
      id = "datasource",
      provider = "com.williamhill.fenix.server.es.impl.KafkaEventSource",
      translator = "com.williamhill.fenix.server.es.trx.Identity",
      active = false,
      settings = {
        topics = ["datasource"],
        bootstrap.servers = "192.168.99.100:9092",
        //bootstrap.servers = "${?KAFKA}:9092",
        group.id = "fenix_datasource",
        enable.auto.commit = true,
        key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer",
        value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer",
        auto.offset.reset = "latest"
      }
    },
    {
      id = "chronos",
      provider = "com.williamhill.fenix.server.es.impl.ChronosEventSource",
      translator = "com.williamhill.fenix.server.es.trx.IncidentTrx",
      active = true,
      settings = {
        chronos = {
          client = {
            servers = [
              // "192.168.99.100:9092"
              "chronos1.williamhill-dev.local:9092",
              "chronos2.williamhill-dev.local:9092",
              "chronos3.williamhill-dev.local:9092"
            ]
            pollInterval = 100
            kafka {
              group.id = "chronos_fenix"
              auto.offset.reset = "latest"
              enable.auto.commit = false
              // auto.commit.interval.ms = 10000
              connections.max.idle.ms = 30000
              // reconnect.backoff.ms = 50
            }
          },
          streams = [
            {
              name = "pds",
              version = "1.1"
            }
          ]
        }
      }
    }
  ]
}
