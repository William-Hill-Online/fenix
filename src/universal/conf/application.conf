include "fenix"
include "serialization"

akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    serializers {
      # proto = "akka.remote.serialization.ProtobufSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }
    kryo {
      trace = true
      idstrategy = "default"
      implicit-registration-logging = true
      post-serialization-transformations = off
    }
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      hostname = ${?FENIX_HOST}
      port = 2551
      port = ${?FENIX_PORT}
    }
  }

   loggers = ["akka.event.slf4j.Slf4jLogger"]
   loglevel = "DEBUG"
   logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  cluster {
    seed-nodes = [
      "akka.tcp://fenix@127.0.0.1:2551"
    ]

    min-nr-of-members = 1
    min-nr-of-members = ${?MIN_MEMBERS}

    auto-down-unreachable-after = 10s
  }
}

fenix.tcp.dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

# Disable legacy metrics in akka-cluster.
akka.cluster.metrics.enabled=on

# Enable metrics extension in akka-cluster-metrics and cluster receptionist
akka.extensions = [
  "akka.cluster.metrics.ClusterMetricsExtension",
  "akka.cluster.client.ClusterClientReceptionist",
  "akka.cluster.pubsub.DistributedPubSub",
  "com.romix.akka.serialization.kryo.KryoSerializationExtension$"
]

# Sigar native library extract location during tests.
# Note: use per-jvm-instance folder when running multiple jvm on one host.
akka.cluster.metrics.native-library-extract-folder=${user.dir}/target/native

# Persistence Config

# Local Storage
# akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
# akka.persistence.journal.leveldb.dir = "target/journal"
# akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
# akka.persistence.snapshot-store.local.dir = "target/snapshots"

# Cassandra Storage
akka.persistence.journal.plugin = "cassandra-journal"
akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

cassandra-snapshot-store.contact-points = [${?CASSANDRA}]
cassandra-snapshot-store.contact-points = ["127.0.0.1"]

cassandra-journal.contact-points = [${?CASSANDRA}]
cassandra-journal.contact-points = ["127.0.0.1"]

cassandra-journal.keyspace = "fenix"
cassandra-snapshot-store.keyspace = "fenix"

cassandra-journal.replication-factor = 1
cassandra-journal.replication-strategy = "SimpleStrategy"

constructr {
  coordination {
    host = etcd
    port = 2379
  }

  coordination-timeout = 3 seconds  // Maximum response time for coordination service (e.g. etcd)
  max-nr-of-seed-nodes = 0          // Any nonpositive value means Int.MaxValue
  nr-of-retries        = 2          // Nr. of tries are nr. of retries + 1
  refresh-interval     = 30 seconds // TTL is refresh-interval * ttl-factor
  retry-delay          = 3 seconds  // Give coordination service (e.g. etcd) some delay before retrying
  ttl-factor           = 2.0        // Must be greater or equal 1 + ((coordination-timeout * (1 + nr-of-retries) + retry-delay * nr-of-retries)/ refresh-interval)!

  join-timeout = 15 seconds // Might depend on cluster size and network properties
}